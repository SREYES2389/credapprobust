// --- Payers ---
/**
 * Creates a new payer record.
 * @param {object} payerData - The data for the new payer (name).
 * @returns {object} A success or error object.
 */
function createPayer(payerData) {
  try {
    if (!payerData || !payerData.name) {
      return { success: false, message: "Payer name is required." };
    }
    const sheet = getSheet(PAYERS_SHEET_NAME, PAYERS_HEADERS);
    const newId = Utilities.getUuid();
    // Headers: ["ID", "Name"]
    const rowData = [newId, payerData.name];
    sheet.appendRow(rowData);
    invalidateRowIndexCache(sheet);
    logAuditEvent("Request", `Payer created: ${payerData.name}`, { payerId: newId });
    return { success: true, message: `Payer "${payerData.name}" created with ID: ${newId}` };
  } catch (error) {
    logAuditEvent("Error", `Failed to create payer: ${error.message}`);
    return { success: false, message: `Failed to create payer: ${error.message}` };
  }
}

/**
 * Retrieves a list of all payers.
 * @returns {object} An object containing success status and payers data.
 */
function listPayers() {
  try {
    const sheet = getSheet(PAYERS_SHEET_NAME, PAYERS_HEADERS);
    const allPayers = sheetDataToObjects(sheet.getDataRange().getValues());
    return { success: true, data: allPayers };
  } catch (error) {
    logAuditEvent("Error", `Failed to list payers: ${error.message}`);
    return { success: false, message: `Failed to list payers: ${error.message}` };
  }
}

/**
 * Retrieves a specific payer by its ID.
 * @param {string} payerId The ID of the payer to retrieve.
 * @returns {object} An object containing success status and the payer data.
 */
function getPayer(payerId) { /* Existing implementation from Code.txt */ }

/**
 * Updates an existing payer.
 * @param {object} payerData - The data to update for the payer (id, name).
 * @returns {object} A success or error message.
 */
function updatePayer(payerData) {
  if (!payerData || !payerData.id) {
    return { success: false, message: "Payer ID is required to update." };
  }
  // Using generic patchDetailedInfo for updating
  const result = patchDetailedInfo(PAYERS_SHEET_NAME, payerData.id, payerData);
  if (result.success) {
    logAuditEvent("Request", `Payer updated: ${payerData.id}`, { payerId: payerData.id, newData: payerData });
  } else {
    logAuditEvent("Error", `Failed to update payer ${payerData.id}: ${result.message}`);
  }
  return result;
}

/**
 * Deletes a payer record and its associated plans and enrollments.
 * @param {string} payerId - The ID of the payer to delete.
 * @returns {object} A success or error message.
 */
function deletePayer(payerId) {
  try {
    const result = deleteDetailedProviderInfo(PAYERS_SHEET_NAME, PAYERS_HEADERS, payerId);
    if (result.success) {
      // Delete associated PayerPlans
      const plansSheet = getSheet(PAYER_PLANS_SHEET_NAME, PAYER_PLANS_HEADERS);
      const planPayerIdColIndex = PAYER_PLANS_HEADERS.indexOf("Payer ID");
      deleteRowsByColumnValue(plansSheet, planPayerIdColIndex, payerId);

      // Note: Deleting ProviderEnrollments directly linked to this payer via payerPlanId requires
      // iterating through enrollments and deleting if their associated plan belongs to this payer.
      // This is not directly supported by `deleteRowsByColumnValue` using only payerId.
      // For robustness, consider adding logic to iterate and delete or a more complex `deleteRowsByColumnValue`.
      // For now, logging a warning that indirect cleanup may be needed for enrollments.
      logAuditEvent("Warning", `Indirect cleanup of enrollments for deleted payer ${payerId} is complex and may require manual verification.`, { payerId: payerId });

      logAuditEvent("Request", `Payer deleted: ${payerId}`, { payerId: payerId });
    }
    return result;
  } catch (error) {
    logAuditEvent("Error", `Failed to delete payer ${payerId}: ${error.message}`);
    return { success: false, message: `Failed to delete payer: ${error.message}` };
  }
}

/**
 * Retrieves a specific payer by its ID, including its associated plans.
 * @param {string} payerId The ID of the payer to retrieve.
 * @returns {object} An object containing success status and the payer data with related plans.
 */
function getPayerDetails(payerId) { /* Existing implementation from Code.txt */ }
